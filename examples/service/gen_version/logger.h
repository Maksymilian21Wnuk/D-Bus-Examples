/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __LOGGER_H__
#define __LOGGER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Introspectable */

#define TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE (org_freedesktop_dbus_introspectable_get_type ())
#define ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, OrgFreedesktopDBusIntrospectable))
#define IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE))
#define ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE, OrgFreedesktopDBusIntrospectableIface))

struct _OrgFreedesktopDBusIntrospectable;
typedef struct _OrgFreedesktopDBusIntrospectable OrgFreedesktopDBusIntrospectable;
typedef struct _OrgFreedesktopDBusIntrospectableIface OrgFreedesktopDBusIntrospectableIface;

struct _OrgFreedesktopDBusIntrospectableIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_introspect) (
    OrgFreedesktopDBusIntrospectable *object,
    GDBusMethodInvocation *invocation);

};

GType org_freedesktop_dbus_introspectable_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_freedesktop_dbus_introspectable_interface_info (void);
guint org_freedesktop_dbus_introspectable_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_freedesktop_dbus_introspectable_complete_introspect (
    OrgFreedesktopDBusIntrospectable *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg0);



/* D-Bus method calls: */
void org_freedesktop_dbus_introspectable_call_introspect (
    OrgFreedesktopDBusIntrospectable *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_introspectable_call_introspect_finish (
    OrgFreedesktopDBusIntrospectable *proxy,
    gchar **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_introspectable_call_introspect_sync (
    OrgFreedesktopDBusIntrospectable *proxy,
    gchar **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY (org_freedesktop_dbus_introspectable_proxy_get_type ())
#define ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, OrgFreedesktopDBusIntrospectableProxy))
#define ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, OrgFreedesktopDBusIntrospectableProxyClass))
#define ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY, OrgFreedesktopDBusIntrospectableProxyClass))
#define IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))
#define IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_PROXY))

typedef struct _OrgFreedesktopDBusIntrospectableProxy OrgFreedesktopDBusIntrospectableProxy;
typedef struct _OrgFreedesktopDBusIntrospectableProxyClass OrgFreedesktopDBusIntrospectableProxyClass;
typedef struct _OrgFreedesktopDBusIntrospectableProxyPrivate OrgFreedesktopDBusIntrospectableProxyPrivate;

struct _OrgFreedesktopDBusIntrospectableProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgFreedesktopDBusIntrospectableProxyPrivate *priv;
};

struct _OrgFreedesktopDBusIntrospectableProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_freedesktop_dbus_introspectable_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopDBusIntrospectableProxy, g_object_unref)
#endif

void org_freedesktop_dbus_introspectable_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopDBusIntrospectable *org_freedesktop_dbus_introspectable_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopDBusIntrospectable *org_freedesktop_dbus_introspectable_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_freedesktop_dbus_introspectable_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopDBusIntrospectable *org_freedesktop_dbus_introspectable_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopDBusIntrospectable *org_freedesktop_dbus_introspectable_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON (org_freedesktop_dbus_introspectable_skeleton_get_type ())
#define ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, OrgFreedesktopDBusIntrospectableSkeleton))
#define ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, OrgFreedesktopDBusIntrospectableSkeletonClass))
#define ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON, OrgFreedesktopDBusIntrospectableSkeletonClass))
#define IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))
#define IS_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_DBUS_INTROSPECTABLE_SKELETON))

typedef struct _OrgFreedesktopDBusIntrospectableSkeleton OrgFreedesktopDBusIntrospectableSkeleton;
typedef struct _OrgFreedesktopDBusIntrospectableSkeletonClass OrgFreedesktopDBusIntrospectableSkeletonClass;
typedef struct _OrgFreedesktopDBusIntrospectableSkeletonPrivate OrgFreedesktopDBusIntrospectableSkeletonPrivate;

struct _OrgFreedesktopDBusIntrospectableSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgFreedesktopDBusIntrospectableSkeletonPrivate *priv;
};

struct _OrgFreedesktopDBusIntrospectableSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_freedesktop_dbus_introspectable_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopDBusIntrospectableSkeleton, g_object_unref)
#endif

OrgFreedesktopDBusIntrospectable *org_freedesktop_dbus_introspectable_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Properties */

#define TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES (org_freedesktop_dbus_properties_get_type ())
#define ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, OrgFreedesktopDBusProperties))
#define IS_ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES))
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, OrgFreedesktopDBusPropertiesIface))

struct _OrgFreedesktopDBusProperties;
typedef struct _OrgFreedesktopDBusProperties OrgFreedesktopDBusProperties;
typedef struct _OrgFreedesktopDBusPropertiesIface OrgFreedesktopDBusPropertiesIface;

struct _OrgFreedesktopDBusPropertiesIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_get) (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface_name,
    const gchar *arg_property_name);

  gboolean (*handle_get_all) (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface_name);

  gboolean (*handle_set) (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface_name,
    const gchar *arg_property_name,
    GVariant *arg_value);

};

GType org_freedesktop_dbus_properties_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_freedesktop_dbus_properties_interface_info (void);
guint org_freedesktop_dbus_properties_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_freedesktop_dbus_properties_complete_get (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg2);

void org_freedesktop_dbus_properties_complete_get_all (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg1);

void org_freedesktop_dbus_properties_complete_set (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void org_freedesktop_dbus_properties_call_get (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    const gchar *arg_property_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_properties_call_get_finish (
    OrgFreedesktopDBusProperties *proxy,
    GVariant **out_unnamed_arg2,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_properties_call_get_sync (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    const gchar *arg_property_name,
    GVariant **out_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_properties_call_get_all (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_properties_call_get_all_finish (
    OrgFreedesktopDBusProperties *proxy,
    GVariant **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_properties_call_get_all_sync (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    GVariant **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_properties_call_set (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    const gchar *arg_property_name,
    GVariant *arg_value,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_properties_call_set_finish (
    OrgFreedesktopDBusProperties *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_properties_call_set_sync (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface_name,
    const gchar *arg_property_name,
    GVariant *arg_value,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY (org_freedesktop_dbus_properties_proxy_get_type ())
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, OrgFreedesktopDBusPropertiesProxy))
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, OrgFreedesktopDBusPropertiesProxyClass))
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, OrgFreedesktopDBusPropertiesProxyClass))
#define IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))
#define IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))

typedef struct _OrgFreedesktopDBusPropertiesProxy OrgFreedesktopDBusPropertiesProxy;
typedef struct _OrgFreedesktopDBusPropertiesProxyClass OrgFreedesktopDBusPropertiesProxyClass;
typedef struct _OrgFreedesktopDBusPropertiesProxyPrivate OrgFreedesktopDBusPropertiesProxyPrivate;

struct _OrgFreedesktopDBusPropertiesProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgFreedesktopDBusPropertiesProxyPrivate *priv;
};

struct _OrgFreedesktopDBusPropertiesProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_freedesktop_dbus_properties_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopDBusPropertiesProxy, g_object_unref)
#endif

void org_freedesktop_dbus_properties_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopDBusProperties *org_freedesktop_dbus_properties_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopDBusProperties *org_freedesktop_dbus_properties_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_freedesktop_dbus_properties_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopDBusProperties *org_freedesktop_dbus_properties_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopDBusProperties *org_freedesktop_dbus_properties_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON (org_freedesktop_dbus_properties_skeleton_get_type ())
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, OrgFreedesktopDBusPropertiesSkeleton))
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, OrgFreedesktopDBusPropertiesSkeletonClass))
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, OrgFreedesktopDBusPropertiesSkeletonClass))
#define IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))
#define IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))

typedef struct _OrgFreedesktopDBusPropertiesSkeleton OrgFreedesktopDBusPropertiesSkeleton;
typedef struct _OrgFreedesktopDBusPropertiesSkeletonClass OrgFreedesktopDBusPropertiesSkeletonClass;
typedef struct _OrgFreedesktopDBusPropertiesSkeletonPrivate OrgFreedesktopDBusPropertiesSkeletonPrivate;

struct _OrgFreedesktopDBusPropertiesSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgFreedesktopDBusPropertiesSkeletonPrivate *priv;
};

struct _OrgFreedesktopDBusPropertiesSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_freedesktop_dbus_properties_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopDBusPropertiesSkeleton, g_object_unref)
#endif

OrgFreedesktopDBusProperties *org_freedesktop_dbus_properties_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.meks.Logger */

#define TYPE_LOGGER (logger_get_type ())
#define LOGGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_LOGGER, Logger))
#define IS_LOGGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_LOGGER))
#define LOGGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_LOGGER, LoggerIface))

struct _Logger;
typedef struct _Logger Logger;
typedef struct _LoggerIface LoggerIface;

struct _LoggerIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_add_log) (
    Logger *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_log_str);

  gint  (*get_log_count) (Logger *object);

  gboolean  (*get_upper) (Logger *object);

  void (*log_count_limit) (
    Logger *object);

};

GType logger_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *logger_interface_info (void);
guint logger_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void logger_complete_add_log (
    Logger *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg1);



/* D-Bus signal emissions functions: */
void logger_emit_log_count_limit (
    Logger *object);



/* D-Bus method calls: */
void logger_call_add_log (
    Logger *proxy,
    const gchar *arg_log_str,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logger_call_add_log_finish (
    Logger *proxy,
    gchar **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean logger_call_add_log_sync (
    Logger *proxy,
    const gchar *arg_log_str,
    gchar **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean logger_get_upper (Logger *object);
void logger_set_upper (Logger *object, gboolean value);

gint logger_get_log_count (Logger *object);
void logger_set_log_count (Logger *object, gint value);


/* ---- */

#define TYPE_LOGGER_PROXY (logger_proxy_get_type ())
#define LOGGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_LOGGER_PROXY, LoggerProxy))
#define LOGGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_LOGGER_PROXY, LoggerProxyClass))
#define LOGGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_LOGGER_PROXY, LoggerProxyClass))
#define IS_LOGGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_LOGGER_PROXY))
#define IS_LOGGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_LOGGER_PROXY))

typedef struct _LoggerProxy LoggerProxy;
typedef struct _LoggerProxyClass LoggerProxyClass;
typedef struct _LoggerProxyPrivate LoggerProxyPrivate;

struct _LoggerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  LoggerProxyPrivate *priv;
};

struct _LoggerProxyClass
{
  GDBusProxyClass parent_class;
};

GType logger_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LoggerProxy, g_object_unref)
#endif

void logger_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Logger *logger_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Logger *logger_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void logger_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Logger *logger_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Logger *logger_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_LOGGER_SKELETON (logger_skeleton_get_type ())
#define LOGGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_LOGGER_SKELETON, LoggerSkeleton))
#define LOGGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_LOGGER_SKELETON, LoggerSkeletonClass))
#define LOGGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_LOGGER_SKELETON, LoggerSkeletonClass))
#define IS_LOGGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_LOGGER_SKELETON))
#define IS_LOGGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_LOGGER_SKELETON))

typedef struct _LoggerSkeleton LoggerSkeleton;
typedef struct _LoggerSkeletonClass LoggerSkeletonClass;
typedef struct _LoggerSkeletonPrivate LoggerSkeletonPrivate;

struct _LoggerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  LoggerSkeletonPrivate *priv;
};

struct _LoggerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType logger_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (LoggerSkeleton, g_object_unref)
#endif

Logger *logger_skeleton_new (void);


G_END_DECLS

#endif /* __LOGGER_H__ */
